# -*- mode: ruby -*-
# vi: set ft=ruby :

# Yakity
#
# Copyright (c) 2018 VMware, Inc. All Rights Reserved.
#
# This product is licensed to you under the Apache 2.0 license (the "License").
# You may not use this product except in compliance with the Apache 2.0 License.
#
# This product may include a number of subcomponents with separate copyright
# notices and license terms. Your use of these subcomponents is subject to the
# terms and conditions of the subcomponent's license, as noted in the LICENSE
# file.

require 'SecureRandom'
require 'yaml'

########################################################################
##                             CONSTANTS                              ##
########################################################################
VAGRANT_DOTFILE_PATH=ENV['VAGRANT_DOTFILE_PATH'] || '.vagrant'
VAGRANT_PROVIDER=ENV['VAGRANT_DEFAULT_PROVIDER'] || 'virtualbox'
CONFIG=ENV['CONFIG'] || 'config.yaml'
HOME=ENV['HOME'] || ENV['USERPROFILE'] || '/tmp/home'
GOPATH=ENV['GOPATH'] || "#{HOME}/go"
K8S_RELEASE_LCL="#{GOPATH}/src/k8s.io/kubernetes"
K8S_RELEASE_REM='/var/lib/kubernetes/install/local'
TLS_CA_CRT="#{VAGRANT_DOTFILE_PATH}/ca.crt"
TLS_CA_KEY="#{VAGRANT_DOTFILE_PATH}/ca.key"
VCSIM=ENV['VCSIM'] || 'true'
CLOUD_PROVIDER=ENV['CLOUD_PROVIDER'] || 'external'
CLOUD_PROVIDER_EXTERNAL=ENV['CLOUD_PROVIDER_EXTERNAL'] || 'vsphere'
CLOUD_PROVIDER_IMAGE=ENV['CLOUD_PROVIDER_IMAGE'] || 'gcr.io/cloud-provider-vsphere/vsphere-cloud-controller-manager:latest'

# The Photon box ships with a static machine-id, which means
# in a multi-machine deployment, all the boxes will have the
# same DHCP-provided IP address. This causes yakity to break
# since etcd is advertising IP addresses that must be unique.
#
# This script disables the host-only NIC, recreates the
# machine-id, and reenables the host-only NIC, thereby causing
# the machine to request a new, unique IP address from the DHCP
# server.
INIT_PHOTON_SCRIPT = <<-EOF
ifconfig eth1 down
rm -f /etc/machine-id
dbus-uuidgen --ensure=/etc/machine-id
ifconfig eth1 up

rm -f /etc/modules-load.d/virtualbox.conf
tdnf install -y gawk \
                unzip \
                lsof \
                bindutils \
                iputils \
                tar
EOF

# Ubuntu doesn't load the /etc/profile by default. This fixes that.
INIT_UBUNTU_SCRIPT = <<-EOF
echo '. /etc/profile' >>/home/vagrant/.bashrc
EOF

INIT_GUEST_SCRIPT = <<-EOF
mkdir -p /var/lib/yakity /opt/bin
EOF

########################################################################
##                             FUNCTIONS                              ##
########################################################################
def copy_file_to_dir(node, src, dst="/tmp")
  node.vm.provision "file",
    source:       src,
    destination:  "#{File.join(dst, File.basename(src))}"
end

def to_serial(u)
  u=u.gsub(/-/,'')
  u_1=u.gsub(/^(\w{16})(\w{16})$/, '\1')
  u_2=u.gsub(/^(\w{16})(\w{16})$/, '\2')
  serial_1=u_1.gsub(/(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})/, '\1 \2 \3 \4 \5 \6 \7 \8')
  serial_2=u_2.gsub(/(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})/, '\1 \2 \3 \4 \5 \6 \7 \8')
  return "#{serial_1}-#{serial_2}"
end

def to_uuid(s)
  return s.gsub(/[\s\-]/, '').gsub(
    /(\w{8})(\w{4})(\w{4})(\w{4})(\w{12})/, '\1-\2-\3-\4-\5')
end

def convert_k8s_uuid(u)
  u1="#{u[6,2]}#{u[4,2]}#{u[2,2]}#{u[0,2]}"
  u2="#{u[11,2]}#{u[9,2]}-#{u[16,2]}#{u[14,2]}"
  u3="#{u[19,4]}-#{u[24,12]}"
  return "#{u1}-#{u2}-#{u3}"
end

def check_k8s_local()
  return if $k8s != 'local'
  abort("invalid k8s=#{$k8s}") if !File.exist?(K8S_RELEASE_LCL)
  $k8s=K8S_RELEASE_LCL
end

def require_ca()
  if File.file?(TLS_CA_CRT) && File.file?(TLS_CA_KEY)
    $ca={:crt=>File.read(TLS_CA_CRT), :key=>File.read(TLS_CA_KEY)}
    return
  end

  require 'openssl'

  days    = (ENV['TLS_DAYS'] || '365').to_i
  subj_c  = ENV['TLS_COUNTRY_NAME'] || 'US'
  subj_st = ENV['TLS_STATE_OR_PROVINCE_NAME'] || 'California'
  subj_l  = ENV['TLS_LOCALITY_NAME'] || 'Palo Alto'
  subj_o  = ENV['TLS_ORG_NAME'] || 'VMware'
  subj_ou = ENV['TLS_OU_NAME'] || 'CNX'
  subj_cn = ENV['TLS_COMMON_NAME'] || 'CNX CICD CA'
  subj_e  = ENV['TLS_EMAIL'] || 'cnx@vmware.com'
  subj    = "/C=#{subj_c}/ST=#{subj_st}/L=#{subj_l}/O=#{subj_o}/OU=#{subj_ou}/CN=#{subj_cn}/emailAddress=#{subj_e}"

  key        = OpenSSL::PKey::RSA.new(2048)
  public_key = key.public_key

  cert            = OpenSSL::X509::Certificate.new
  cert.subject    = cert.issuer = OpenSSL::X509::Name.parse(subj)
  cert.not_before = Time.now
  cert.not_after  = Time.now + days * 24 * 60 * 60
  cert.public_key = public_key
  cert.serial     = SecureRandom.hex.to_i(16)
  cert.version    = 2

  ef = OpenSSL::X509::ExtensionFactory.new
  ef.subject_certificate = cert
  ef.issuer_certificate = cert
  cert.extensions = [
    ef.create_extension("basicConstraints","CA:TRUE", true),
    ef.create_extension("keyUsage", "digitalSignature,cRLSign,keyCertSign", true),
    ef.create_extension("subjectKeyIdentifier", "hash"),
  ]

  cert.sign key, OpenSSL::Digest::SHA1.new

  $ca={:crt=>cert.to_pem, :key=>key.to_pem}
  File.write(TLS_CA_CRT, $ca[:crt])
  File.write(TLS_CA_KEY, $ca[:key])
end

def require_uuid()
  file="#{VAGRANT_DOTFILE_PATH}/uuid"
  if File.file?(file)
    $uuid=File.read(file)
  else
    $uuid=SecureRandom.uuid.downcase
    File.write(file, $uuid)
  end
end

def require_config()
  abort "missing config file: #{CONFIG}" if !File.file?(CONFIG)
  config=YAML.load_file(CONFIG)
  $k8s = config['k8s'] || abort('k8s required')
  $box = config['box'] || abort('box required')
  $cpu = config['cpu'] || abort('cpu required')
  $mem = config['mem'] || abort('mem required')
  $num_nodes = config['nodes'] || abort('nodes required')
  $num_controllers = config['controllers'] || abort('controllers required')
  $num_both = config['both'] || abort('both required')
  $num_workers = $num_nodes-$num_controllers
end

def require_nodes()
  file="#{VAGRANT_DOTFILE_PATH}/nodes.yaml"
  if File.file?(file)
    $nodes=YAML.load_file(file)
    return
  end
  $nodes = []
  for i in 1..$num_nodes do
    if (i <= $num_controllers)
      node_type = i <= ($num_controllers-$num_both) ? "controller" : "both"
      host_name = sprintf("c%02d", i)
    else
      node_type = "worker"
      host_name = sprintf("w%02d", i-$num_controllers)
    end
    uuid_suffix = i.to_s(16)
    uuid = "#{$uuid[0..-(uuid_suffix.length+1)]}#{uuid_suffix}"
    $nodes << {
      :host       => host_name,
      :type       => node_type,
      :uuid       => uuid,
      :serial     => to_serial(uuid),
      :k8s_uuid   => convert_k8s_uuid(uuid),
      :k8s_serial => to_serial(convert_k8s_uuid(uuid)),
      :mac        => "005056#{SecureRandom.hex[0..5]}",
    }
  end
  File.write(file, $nodes.to_yaml)
end

def require_etcd()
  return if $num_nodes <= 1
  file="#{VAGRANT_DOTFILE_PATH}/etcd.disco"
  if File.file?(file)
    $etcd_disco=File.read(file)
  else
    require "net/http"; require "uri"
    uri=URI.parse("https://discovery.etcd.io/new?size=#{$num_controllers}")
    $etcd_disco=Net::HTTP.get_response(uri).body
    File.write(file, $etcd_disco)
  end
end

########################################################################
##                               MAIN                                 ##
########################################################################

# Abort Vagrant if there is no config file
require_config

# Ensure there is a certificate authority cert/key pair.
require_ca

# Ensure there is an etcd discovery URL if there is more than one node.
require_etcd

# Ensure there is a UUID seed value at VAGRANT_DOTFILE_PATH/uuid
require_uuid

# Create the node definitions from which the boxes are derived.
require_nodes

Vagrant.configure("2") do |config|
  config.vm.box = $box

  # Disable the default synced folder.
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # CentOS and Ubuntu support deploying Kubernetes from a local staging
  # directory with the tarballs.
  if (/(?i)centos|ubuntu/ =~ $box and File.exist?($k8s))
    $k8s_version="file://#{K8S_RELEASE_REM}"
    config.vm.synced_folder File.absolute_path($k8s), K8S_RELEASE_REM
  else
    $k8s_version=$k8s
  end

  # Set the provider preference order.
  config.vm.provider "virtualbox"
  config.vm.provider "vmware_fusion"

  config.vm.provider VAGRANT_PROVIDER do |p|
    case VAGRANT_PROVIDER
    when 'virtualbox'
      p.cpus =   $cpu
      p.memory = $mem
      p.customize ["modifyvm", :id, "--macaddress1", "auto"]
      p.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
    when 'vmware_desktop', 'vmware_fusion'
      p.vmx["numvcpus"] = $cpu
      p.vmx["memsize"]  = $mem
    end
  end

  # Create the node(s)
  $nodes.each do |node_config|
    config.vm.define node_config[:host] do |node|

      node.vm.network "private_network",
        type: "dhcp",
        mac:  node_config[:mac]

      node.vm.provider VAGRANT_PROVIDER do |p|
        node_uuid=node_config[:uuid]
        case VAGRANT_PROVIDER
        # https://www.virtualbox.org/manual/ch09.html
        when 'virtualbox'
          p.customize [
            "setextradata",
            :id,
            "VBoxInternal/Devices/pcbios/0/Config/DmiSystemUuid",
            "string:#{node_config[:k8s_uuid]}"]
          p.customize [
            "setextradata",
            :id,
            "VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial",
            "string:VMware-#{node_config[:serial]}"]
        when 'vmware_fusion'
          p.vmx['uuid.bios'] = node_config[:k8s_serial]
          p.vmx['serialnumber'] = "VMware-#{node_config[:serial]}"
        end
      end

      # Assign the fully-qualified host name.
      node.vm.hostname = "#{node_config[:host]}.yakity"

      # Handle box-specific requirements.
      if (/(?i)photon/ =~ $box)
        node.vm.provision "init-guest", type: "shell" do |s|
          s.inline = <<-SHELL
            #{INIT_GUEST_SCRIPT}
            #{INIT_PHOTON_SCRIPT}
          SHELL
        end
      elsif (/(?i)ubuntu/ =~ $box)
        node.vm.provision "init-guest", type: "shell" do |s|
          s.inline = <<-SHELL
            #{INIT_GUEST_SCRIPT}
            #{INIT_UBUNTU_SCRIPT}
          SHELL
        end
      else
        node.vm.provision "init-guest", type: "shell" do |s|
          s.inline = <<-SHELL
            #{INIT_GUEST_SCRIPT}
          SHELL
        end
      end

      if (ENV['BIN_DIR'])
        node.vm.provision "file",
          source:       "#{ENV['BIN_DIR']}",
          destination:  "/tmp/opt/bin"
      end

      # Copy the yakity script and certificate authority cert/key pair
      # to the /tmp folder on the VM.
      copy_file_to_dir(node, '../yakity.sh')
      copy_file_to_dir(node, 'yakity.service')
      copy_file_to_dir(node, 'tail-log.sh')
      copy_file_to_dir(node, TLS_CA_CRT)
      copy_file_to_dir(node, TLS_CA_KEY)

      node.vm.provision "init-yakity", type: "shell" do |s|
        s.inline = <<-SHELL
          # Move the yakity script into /var/lib/yakity
          # and ensure it is executable.
          mv /tmp/yakity.sh /var/lib/yakity
          chown root:root /var/lib/yakity/yakity.sh
          chmod 0755 /var/lib/yakity/yakity.sh

          # Move the tail-log script into /var/lib/yakity
          # and ensure it is executable.
          mv /tmp/tail-log.sh /var/lib/yakity
          chown root:root /var/lib/yakity/tail-log.sh
          chmod 0755 /var/lib/yakity/tail-log.sh

          # Move the yakity service into /var/lib/yakity.
          mv /tmp/yakity.service /var/lib/yakity
          chown root:root /var/lib/yakity/yakity.service

          # Move the certificate authority cert/key pair
          # into /etc/ssl and set the file permissions.
          mv /tmp/ca.crt /tmp/ca.key /etc/ssl/
          chown root:root /etc/ssl/ca.crt /etc/ssl/ca.key
          chmod 0644 /etc/ssl/ca.crt; chmod 0400 /etc/ssl/ca.key

          # If /tmp/opt/bin exists then move everything in it
          # to /opt/bin and mark all the contents as executable.
          if [ -e /tmp/opt/bin ]; then
            mv /tmp/opt/bin/* /opt/bin
            chown -R root:root /opt/bin
            chmod -R 0755 /opt/bin
          fi

          # Write the yakity configuration file.
          nic=$(ip a | grep '^3:' | awk -F: '{print $2}' | tr -d '[:space:]')
          ip4=$(ip route get dev "${nic}" 1 | awk '{print $NF;exit}')
          cat <<EOF >/etc/default/yakity
K8S_VERSION="#{$k8s_version}"
IPV4_ADDRESS="${ip4}"
ETCD_DISCOVERY="#{$etcd_disco}"
NUM_NODES="#{$num_nodes}"
NUM_CONTROLLERS="#{$num_controllers}"
NODE_TYPE="#{node_config[:type]}"
INSTALL_CONFORMANCE_TESTS="false"
HOST_NAME_OVERRIDE="true"
FAIL_SWAP_ON="false"
VCSIM="#{VCSIM}"
CLOUD_PROVIDER="#{CLOUD_PROVIDER}"
CLOUD_PROVIDER_EXTERNAL="#{CLOUD_PROVIDER_EXTERNAL}"
CLOUD_PROVIDER_IMAGE="#{CLOUD_PROVIDER_IMAGE}"
EOF

          # Enable the yakity service (but do not start it).
          systemctl -l enable /var/lib/yakity/yakity.service
        SHELL
      end

      # Start the yakity service.
      node.vm.provision "start-yakity", type: "shell" do |s|
        s.inline = "systemctl -l --no-block start yakity"
      end
    end
  end
end
