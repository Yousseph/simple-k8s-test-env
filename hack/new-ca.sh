#!/bin/sh

# posix compliant
# verified by https://www.shellcheck.net

#
# USAGE: new-ca.sh
#    This script generates a PEM-formatted, self-signed CA.
#    The generated key and certificate are printed to STDOUT unless
#    TLS_CA_KEY and TLS_CA_CRT are both set or TLS_CA_PEM is set.
#
# CONFIGURATION
#     This script is configured via the following environment
#     variables:
#

# The paths to the generated key and certificate files.
# If TLS_CA_KEY, TLS_CA_CRT, and TLS_CA_PEM are all unset then
# the generated key and certificate are printed to STDOUT.
#TLS_CA_KEY=ca.key
#TLS_CA_CRT=ca.crt

# The path to the combined key and certificate file.
# Setting this value overrides TLS_CA_KEY and TLS_CA_CRT.
#TLS_CA_PEM=ca.pem

# The strength of the generated certificate
TLS_DEFAULT_BITS=${TLS_DEFAULT_BITS:-2048}

# The number of days until the certificate expires. The default
# value is 100 years.
TLS_DEFAULT_DAYS=${TLS_DEFAULT_DAYS:-36500}

# The components that make up the certificate's distinguished name.
TLS_COUNTRY_NAME=${TLS_COUNTRY_NAME:-US}
TLS_STATE_OR_PROVINCE_NAME=${TLS_STATE_OR_PROVINCE_NAME:-California}
TLS_LOCALITY_NAME=${TLS_LOCALITY_NAME:-Palo Alto}
TLS_ORG_NAME=${TLS_ORG_NAME:-VMware}
TLS_OU_NAME=${TLS_OU_NAME:-CNX}
TLS_COMMON_NAME=${TLS_COMMON_NAME:-CNX CICD CA}
TLS_EMAIL=${TLS_EMAIL:-cnx@vmware.com}

# Make a temporary directory and switch to it.
OLDDIR=$(pwd)
MYTEMP=$(mktemp -d) && cd "$MYTEMP" || exit 1

# Returns the absolute path of the provided argument.
abs_path() {
  { [ "$(printf %.1s "${1}")" = "/" ] && echo "${1}"; } || echo "${OLDDIR}/${1}"
}

# Write the SSL config file to disk.
cat > ssl.conf <<EOF
[ req ]
default_bits           = ${TLS_DEFAULT_BITS}
encrypt_key            = no
default_md             = sha1
prompt                 = no
utf8                   = yes
distinguished_name     = dn
req_extensions         = ext
x509_extensions        = ext

[ dn ]
countryName            = ${TLS_COUNTRY_NAME}
stateOrProvinceName    = ${TLS_STATE_OR_PROVINCE_NAME}
localityName           = ${TLS_LOCALITY_NAME}
organizationName       = ${TLS_ORG_NAME}
organizationalUnitName = ${TLS_OU_NAME}
commonName             = ${TLS_COMMON_NAME}
emailAddress           = ${TLS_EMAIL}

[ ext ]
basicConstraints       = critical, CA:TRUE
keyUsage               = critical, cRLSign, digitalSignature, keyCertSign
subjectKeyIdentifier   = hash
EOF

if [ "${DEBUG}" = "true" ]; then cat ssl.conf; fi

# Generate a a self-signed certificate:
openssl req -config ssl.conf \
            -new \
            -nodes \
            -x509 \
            -days "${TLS_DEFAULT_DAYS}" \
            -keyout key.pem \
            -out crt.pem || exit "${?}"

# "Fix" the private key. Keys generated by "openssl req" are not
# in the correct format. 
openssl rsa -in key.pem -out key.pem.fixed || exit "${?}"
mv -f key.pem.fixed key.pem

# Generate a combined PEM file at TLS_CA_PEM.
if [ -n "${TLS_CA_PEM}" ]; then
  PEM_FILE=$(abs_path "${TLS_CA_PEM}")
  mkdir -p "$(dirname "${PEM_FILE}")"
  cat key.pem > "${PEM_FILE}"
  cat crt.pem >> "${PEM_FILE}"
fi

# Copy the key and crt files to TLS_CA_KEY and TLS_CA_CRT.
if [ -n "${TLS_CA_KEY}" ]; then
  KEY_FILE=$(abs_path "${TLS_CA_KEY}")
  mkdir -p "$(dirname "${KEY_FILE}")"
  cp -f key.pem "${KEY_FILE}"
fi
if [ -n "${TLS_CA_CRT}" ]; then
  CRT_FILE=$(abs_path "${TLS_CA_CRT}")
  mkdir -p "$(dirname "${CRT_FILE}")"
  cp -f crt.pem "${CRT_FILE}"
fi

# Print the certificate's information if requested.
if [ "${TLS_PLAIN_TEXT}" = "true" ]; then
  echo && openssl x509 -in crt.pem -noout -text
fi

exit 0
